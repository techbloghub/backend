// Code generated by ent, DO NOT EDIT.

package company

import (
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/techbloghub/server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDeleteTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldLogoURL, vc), err)
}

// BlogURL applies equality check predicate on the "blog_url" field. It's identical to BlogURLEQ.
func BlogURL(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldBlogURL, vc), err)
}

// RssURL applies equality check predicate on the "rss_url" field. It's identical to RssURLEQ.
func RssURL(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldRssURL, vc), err)
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldDeleteTime))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldName, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldLogoURL, vc), err)
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldNEQ(FieldLogoURL, vc), err)
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.LogoURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldIn(FieldLogoURL, v...), err)
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.LogoURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldNotIn(FieldLogoURL, v...), err)
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGT(FieldLogoURL, vc), err)
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGTE(FieldLogoURL, vc), err)
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLT(FieldLogoURL, vc), err)
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLTE(FieldLogoURL, vc), err)
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("logo_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContains(FieldLogoURL, vcs), err)
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("logo_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasPrefix(FieldLogoURL, vcs), err)
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("logo_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasSuffix(FieldLogoURL, vcs), err)
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("logo_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldEqualFold(FieldLogoURL, vcs), err)
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.LogoURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("logo_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContainsFold(FieldLogoURL, vcs), err)
}

// BlogURLEQ applies the EQ predicate on the "blog_url" field.
func BlogURLEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldBlogURL, vc), err)
}

// BlogURLNEQ applies the NEQ predicate on the "blog_url" field.
func BlogURLNEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldNEQ(FieldBlogURL, vc), err)
}

// BlogURLIn applies the In predicate on the "blog_url" field.
func BlogURLIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlogURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldIn(FieldBlogURL, v...), err)
}

// BlogURLNotIn applies the NotIn predicate on the "blog_url" field.
func BlogURLNotIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlogURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldNotIn(FieldBlogURL, v...), err)
}

// BlogURLGT applies the GT predicate on the "blog_url" field.
func BlogURLGT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGT(FieldBlogURL, vc), err)
}

// BlogURLGTE applies the GTE predicate on the "blog_url" field.
func BlogURLGTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGTE(FieldBlogURL, vc), err)
}

// BlogURLLT applies the LT predicate on the "blog_url" field.
func BlogURLLT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLT(FieldBlogURL, vc), err)
}

// BlogURLLTE applies the LTE predicate on the "blog_url" field.
func BlogURLLTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLTE(FieldBlogURL, vc), err)
}

// BlogURLContains applies the Contains predicate on the "blog_url" field.
func BlogURLContains(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("blog_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContains(FieldBlogURL, vcs), err)
}

// BlogURLHasPrefix applies the HasPrefix predicate on the "blog_url" field.
func BlogURLHasPrefix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("blog_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasPrefix(FieldBlogURL, vcs), err)
}

// BlogURLHasSuffix applies the HasSuffix predicate on the "blog_url" field.
func BlogURLHasSuffix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("blog_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasSuffix(FieldBlogURL, vcs), err)
}

// BlogURLEqualFold applies the EqualFold predicate on the "blog_url" field.
func BlogURLEqualFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("blog_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldEqualFold(FieldBlogURL, vcs), err)
}

// BlogURLContainsFold applies the ContainsFold predicate on the "blog_url" field.
func BlogURLContainsFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.BlogURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("blog_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContainsFold(FieldBlogURL, vcs), err)
}

// RssURLEQ applies the EQ predicate on the "rss_url" field.
func RssURLEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldEQ(FieldRssURL, vc), err)
}

// RssURLNEQ applies the NEQ predicate on the "rss_url" field.
func RssURLNEQ(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldNEQ(FieldRssURL, vc), err)
}

// RssURLIn applies the In predicate on the "rss_url" field.
func RssURLIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.RssURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldIn(FieldRssURL, v...), err)
}

// RssURLNotIn applies the NotIn predicate on the "rss_url" field.
func RssURLNotIn(vs ...*url.URL) predicate.Company {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.RssURL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.CompanyOrErr(sql.FieldNotIn(FieldRssURL, v...), err)
}

// RssURLGT applies the GT predicate on the "rss_url" field.
func RssURLGT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGT(FieldRssURL, vc), err)
}

// RssURLGTE applies the GTE predicate on the "rss_url" field.
func RssURLGTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldGTE(FieldRssURL, vc), err)
}

// RssURLLT applies the LT predicate on the "rss_url" field.
func RssURLLT(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLT(FieldRssURL, vc), err)
}

// RssURLLTE applies the LTE predicate on the "rss_url" field.
func RssURLLTE(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	return predicate.CompanyOrErr(sql.FieldLTE(FieldRssURL, vc), err)
}

// RssURLContains applies the Contains predicate on the "rss_url" field.
func RssURLContains(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("rss_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContains(FieldRssURL, vcs), err)
}

// RssURLHasPrefix applies the HasPrefix predicate on the "rss_url" field.
func RssURLHasPrefix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("rss_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasPrefix(FieldRssURL, vcs), err)
}

// RssURLHasSuffix applies the HasSuffix predicate on the "rss_url" field.
func RssURLHasSuffix(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("rss_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldHasSuffix(FieldRssURL, vcs), err)
}

// RssURLEqualFold applies the EqualFold predicate on the "rss_url" field.
func RssURLEqualFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("rss_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldEqualFold(FieldRssURL, vcs), err)
}

// RssURLContainsFold applies the ContainsFold predicate on the "rss_url" field.
func RssURLContainsFold(v *url.URL) predicate.Company {
	vc, err := ValueScanner.RssURL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("rss_url value is not a string: %T", vc)
	}
	return predicate.CompanyOrErr(sql.FieldContainsFold(FieldRssURL, vcs), err)
}

// HasPostings applies the HasEdge predicate on the "postings" edge.
func HasPostings() predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostingsTable, PostingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostingsWith applies the HasEdge predicate on the "postings" edge with a given conditions (other predicates).
func HasPostingsWith(preds ...predicate.Posting) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		step := newPostingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Company) predicate.Company {
	return predicate.Company(sql.NotPredicates(p))
}
