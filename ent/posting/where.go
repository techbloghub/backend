// Code generated by ent, DO NOT EDIT.

package posting

import (
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/techbloghub/server/ent/predicate"
	"github.com/techbloghub/server/internal/schemasupport"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldTitle, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldEQ(FieldURL, vc), err)
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldPublishedAt, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldTags, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Posting {
	return predicate.Posting(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Posting {
	return predicate.Posting(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Posting {
	return predicate.Posting(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Posting {
	return predicate.Posting(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Posting {
	return predicate.Posting(sql.FieldContainsFold(FieldTitle, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldEQ(FieldURL, vc), err)
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldNEQ(FieldURL, vc), err)
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...*url.URL) predicate.Posting {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.URL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.PostingOrErr(sql.FieldIn(FieldURL, v...), err)
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...*url.URL) predicate.Posting {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.URL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.PostingOrErr(sql.FieldNotIn(FieldURL, v...), err)
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldGT(FieldURL, vc), err)
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldGTE(FieldURL, vc), err)
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldLT(FieldURL, vc), err)
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.PostingOrErr(sql.FieldLTE(FieldURL, vc), err)
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.PostingOrErr(sql.FieldContains(FieldURL, vcs), err)
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.PostingOrErr(sql.FieldHasPrefix(FieldURL, vcs), err)
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.PostingOrErr(sql.FieldHasSuffix(FieldURL, vcs), err)
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.PostingOrErr(sql.FieldEqualFold(FieldURL, vcs), err)
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v *url.URL) predicate.Posting {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.PostingOrErr(sql.FieldContainsFold(FieldURL, vcs), err)
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldPublishedAt, v))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...*schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...*schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v *schemasupport.PostingTags) predicate.Posting {
	return predicate.Posting(sql.FieldLTE(FieldTags, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Posting {
	return predicate.Posting(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Posting {
	return predicate.Posting(sql.FieldNotNull(FieldTags))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Posting {
	return predicate.Posting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Posting {
	return predicate.Posting(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Posting) predicate.Posting {
	return predicate.Posting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Posting) predicate.Posting {
	return predicate.Posting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Posting) predicate.Posting {
	return predicate.Posting(sql.NotPredicates(p))
}
