// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/techbloghub/server/ent/company"
	"github.com/techbloghub/server/ent/posting"
)

// CompanyCreate is the builder for creating a Company entity.
type CompanyCreate struct {
	config
	mutation *CompanyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *CompanyCreate) SetCreateTime(t time.Time) *CompanyCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCreateTime(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CompanyCreate) SetUpdateTime(t time.Time) *CompanyCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableUpdateTime(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetDeleteTime sets the "delete_time" field.
func (cc *CompanyCreate) SetDeleteTime(t time.Time) *CompanyCreate {
	cc.mutation.SetDeleteTime(t)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableDeleteTime(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetDeleteTime(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CompanyCreate) SetName(s string) *CompanyCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetLogoURL sets the "logo_url" field.
func (cc *CompanyCreate) SetLogoURL(u *url.URL) *CompanyCreate {
	cc.mutation.SetLogoURL(u)
	return cc
}

// SetBlogURL sets the "blog_url" field.
func (cc *CompanyCreate) SetBlogURL(u *url.URL) *CompanyCreate {
	cc.mutation.SetBlogURL(u)
	return cc
}

// SetRssURL sets the "rss_url" field.
func (cc *CompanyCreate) SetRssURL(u *url.URL) *CompanyCreate {
	cc.mutation.SetRssURL(u)
	return cc
}

// AddPostingIDs adds the "postings" edge to the Posting entity by IDs.
func (cc *CompanyCreate) AddPostingIDs(ids ...int) *CompanyCreate {
	cc.mutation.AddPostingIDs(ids...)
	return cc
}

// AddPostings adds the "postings" edges to the Posting entity.
func (cc *CompanyCreate) AddPostings(p ...*Posting) *CompanyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPostingIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cc *CompanyCreate) Mutation() *CompanyMutation {
	return cc.mutation
}

// Save creates the Company in the database.
func (cc *CompanyCreate) Save(ctx context.Context) (*Company, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompanyCreate) SaveX(ctx context.Context) *Company {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompanyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompanyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompanyCreate) defaults() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		if company.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized company.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := company.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		if company.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized company.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := company.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompanyCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Company.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Company.update_time"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Company.name"`)}
	}
	if _, ok := cc.mutation.LogoURL(); !ok {
		return &ValidationError{Name: "logo_url", err: errors.New(`ent: missing required field "Company.logo_url"`)}
	}
	if _, ok := cc.mutation.BlogURL(); !ok {
		return &ValidationError{Name: "blog_url", err: errors.New(`ent: missing required field "Company.blog_url"`)}
	}
	if _, ok := cc.mutation.RssURL(); !ok {
		return &ValidationError{Name: "rss_url", err: errors.New(`ent: missing required field "Company.rss_url"`)}
	}
	return nil
}

func (cc *CompanyCreate) sqlSave(ctx context.Context) (*Company, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := cc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompanyCreate) createSpec() (*Company, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Company{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(company.Table, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(company.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(company.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.SetField(company.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.LogoURL(); ok {
		vv, err := company.ValueScanner.LogoURL.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(company.FieldLogoURL, field.TypeString, vv)
		_node.LogoURL = value
	}
	if value, ok := cc.mutation.BlogURL(); ok {
		vv, err := company.ValueScanner.BlogURL.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(company.FieldBlogURL, field.TypeString, vv)
		_node.BlogURL = value
	}
	if value, ok := cc.mutation.RssURL(); ok {
		vv, err := company.ValueScanner.RssURL.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(company.FieldRssURL, field.TypeString, vv)
		_node.RssURL = value
	}
	if nodes := cc.mutation.PostingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostingsTable,
			Columns: []string{company.PostingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// CompanyCreateBulk is the builder for creating many Company entities in bulk.
type CompanyCreateBulk struct {
	config
	err      error
	builders []*CompanyCreate
}

// Save creates the Company entities in the database.
func (ccb *CompanyCreateBulk) Save(ctx context.Context) ([]*Company, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Company, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompanyCreateBulk) SaveX(ctx context.Context) []*Company {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompanyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
