// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"net/url"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/techbloghub/server/ent/company"
	"github.com/techbloghub/server/ent/posting"
	"github.com/techbloghub/server/internal/schemasupport"
)

// Posting is the model entity for the Posting schema.
type Posting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// URL holds the value of the "url" field.
	URL *url.URL `json:"url,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags *schemasupport.PostingTags `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostingQuery when eager-loading is set.
	Edges            PostingEdges `json:"edges"`
	company_postings *int
	selectValues     sql.SelectValues
}

// PostingEdges holds the relations/edges for other nodes in the graph.
type PostingEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostingEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Posting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posting.FieldTags:
			values[i] = new(schemasupport.PostingTags)
		case posting.FieldID:
			values[i] = new(sql.NullInt64)
		case posting.FieldTitle:
			values[i] = new(sql.NullString)
		case posting.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		case posting.FieldURL:
			values[i] = posting.ValueScanner.URL.ScanValue()
		case posting.ForeignKeys[0]: // company_postings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Posting fields.
func (po *Posting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case posting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case posting.FieldURL:
			if value, err := posting.ValueScanner.URL.FromValue(values[i]); err != nil {
				return err
			} else {
				po.URL = value
			}
		case posting.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				po.PublishedAt = value.Time
			}
		case posting.FieldTags:
			if value, ok := values[i].(*schemasupport.PostingTags); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil {
				po.Tags = value
			}
		case posting.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_postings", value)
			} else if value.Valid {
				po.company_postings = new(int)
				*po.company_postings = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Posting.
// This includes values selected through modifiers, order, etc.
func (po *Posting) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Posting entity.
func (po *Posting) QueryCompany() *CompanyQuery {
	return NewPostingClient(po.config).QueryCompany(po)
}

// Update returns a builder for updating this Posting.
// Note that you need to call Posting.Unwrap() before calling this method if this Posting
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Posting) Update() *PostingUpdateOne {
	return NewPostingClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Posting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Posting) Unwrap() *Posting {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Posting is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Posting) String() string {
	var builder strings.Builder
	builder.WriteString("Posting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fmt.Sprintf("%v", po.URL))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(po.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", po.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Postings is a parsable slice of Posting.
type Postings []*Posting
