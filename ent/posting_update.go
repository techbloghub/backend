// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/techbloghub/server/ent/company"
	"github.com/techbloghub/server/ent/posting"
	"github.com/techbloghub/server/ent/predicate"
	"github.com/techbloghub/server/internal/schemasupport"
)

// PostingUpdate is the builder for updating Posting entities.
type PostingUpdate struct {
	config
	hooks    []Hook
	mutation *PostingMutation
}

// Where appends a list predicates to the PostingUpdate builder.
func (pu *PostingUpdate) Where(ps ...predicate.Posting) *PostingUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PostingUpdate) SetUpdateTime(t time.Time) *PostingUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostingUpdate) SetTitle(s string) *PostingUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostingUpdate) SetNillableTitle(s *string) *PostingUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetURL sets the "url" field.
func (pu *PostingUpdate) SetURL(u *url.URL) *PostingUpdate {
	pu.mutation.SetURL(u)
	return pu
}

// SetPublishedAt sets the "published_at" field.
func (pu *PostingUpdate) SetPublishedAt(t time.Time) *PostingUpdate {
	pu.mutation.SetPublishedAt(t)
	return pu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (pu *PostingUpdate) SetNillablePublishedAt(t *time.Time) *PostingUpdate {
	if t != nil {
		pu.SetPublishedAt(*t)
	}
	return pu
}

// SetTags sets the "tags" field.
func (pu *PostingUpdate) SetTags(st *schemasupport.PostingTags) *PostingUpdate {
	pu.mutation.SetTags(st)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *PostingUpdate) ClearTags() *PostingUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (pu *PostingUpdate) SetCompanyID(id int) *PostingUpdate {
	pu.mutation.SetCompanyID(id)
	return pu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (pu *PostingUpdate) SetNillableCompanyID(id *int) *PostingUpdate {
	if id != nil {
		pu = pu.SetCompanyID(*id)
	}
	return pu
}

// SetCompany sets the "company" edge to the Company entity.
func (pu *PostingUpdate) SetCompany(c *Company) *PostingUpdate {
	return pu.SetCompanyID(c.ID)
}

// Mutation returns the PostingMutation object of the builder.
func (pu *PostingUpdate) Mutation() *PostingMutation {
	return pu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (pu *PostingUpdate) ClearCompany() *PostingUpdate {
	pu.mutation.ClearCompany()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostingUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostingUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostingUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostingUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostingUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := posting.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

func (pu *PostingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(posting.Table, posting.Columns, sqlgraph.NewFieldSpec(posting.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(posting.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(posting.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		vv, err := posting.ValueScanner.URL.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(posting.FieldURL, field.TypeString, vv)
	}
	if value, ok := pu.mutation.PublishedAt(); ok {
		_spec.SetField(posting.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(posting.FieldTags, field.TypeOther, value)
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(posting.FieldTags, field.TypeOther)
	}
	if pu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posting.CompanyTable,
			Columns: []string{posting.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posting.CompanyTable,
			Columns: []string{posting.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostingUpdateOne is the builder for updating a single Posting entity.
type PostingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostingMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PostingUpdateOne) SetUpdateTime(t time.Time) *PostingUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostingUpdateOne) SetTitle(s string) *PostingUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostingUpdateOne) SetNillableTitle(s *string) *PostingUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetURL sets the "url" field.
func (puo *PostingUpdateOne) SetURL(u *url.URL) *PostingUpdateOne {
	puo.mutation.SetURL(u)
	return puo
}

// SetPublishedAt sets the "published_at" field.
func (puo *PostingUpdateOne) SetPublishedAt(t time.Time) *PostingUpdateOne {
	puo.mutation.SetPublishedAt(t)
	return puo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (puo *PostingUpdateOne) SetNillablePublishedAt(t *time.Time) *PostingUpdateOne {
	if t != nil {
		puo.SetPublishedAt(*t)
	}
	return puo
}

// SetTags sets the "tags" field.
func (puo *PostingUpdateOne) SetTags(st *schemasupport.PostingTags) *PostingUpdateOne {
	puo.mutation.SetTags(st)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *PostingUpdateOne) ClearTags() *PostingUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (puo *PostingUpdateOne) SetCompanyID(id int) *PostingUpdateOne {
	puo.mutation.SetCompanyID(id)
	return puo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (puo *PostingUpdateOne) SetNillableCompanyID(id *int) *PostingUpdateOne {
	if id != nil {
		puo = puo.SetCompanyID(*id)
	}
	return puo
}

// SetCompany sets the "company" edge to the Company entity.
func (puo *PostingUpdateOne) SetCompany(c *Company) *PostingUpdateOne {
	return puo.SetCompanyID(c.ID)
}

// Mutation returns the PostingMutation object of the builder.
func (puo *PostingUpdateOne) Mutation() *PostingMutation {
	return puo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (puo *PostingUpdateOne) ClearCompany() *PostingUpdateOne {
	puo.mutation.ClearCompany()
	return puo
}

// Where appends a list predicates to the PostingUpdate builder.
func (puo *PostingUpdateOne) Where(ps ...predicate.Posting) *PostingUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostingUpdateOne) Select(field string, fields ...string) *PostingUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Posting entity.
func (puo *PostingUpdateOne) Save(ctx context.Context) (*Posting, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostingUpdateOne) SaveX(ctx context.Context) *Posting {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostingUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostingUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostingUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := posting.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

func (puo *PostingUpdateOne) sqlSave(ctx context.Context) (_node *Posting, err error) {
	_spec := sqlgraph.NewUpdateSpec(posting.Table, posting.Columns, sqlgraph.NewFieldSpec(posting.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Posting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posting.FieldID)
		for _, f := range fields {
			if !posting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(posting.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(posting.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		vv, err := posting.ValueScanner.URL.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(posting.FieldURL, field.TypeString, vv)
	}
	if value, ok := puo.mutation.PublishedAt(); ok {
		_spec.SetField(posting.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(posting.FieldTags, field.TypeOther, value)
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(posting.FieldTags, field.TypeOther)
	}
	if puo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posting.CompanyTable,
			Columns: []string{posting.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posting.CompanyTable,
			Columns: []string{posting.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Posting{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
